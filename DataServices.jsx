import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  GridLegacy as Grid,
  FormHelperText,
  Tooltip,
  IconButton,
  Button
} from '@mui/material';
import { HelpOutline, Add, Delete } from '@mui/icons-material';

const DataServices = ({ data, onChange, onValidityChange }) => {
  const [dataServices, setDataServices] = useState(data || [
    {
      id: `DSVC-${Date.now()}`,
      title: '',
      description: '',
      creationDate: '',
      creator: '',
      modifiedBy: '',
      hostedBy: '',
      endpoint: '',
      serviceType: '',
      modifiedDate: new Date().toISOString().slice(0, 16)
    }
  ]);

  // Update local state when parent data changes
  useEffect(() => {
    setDataServices(data || [
      {
        id: `DSVC-${Date.now()}`,
        title: '',
        description: '',
        creationDate: '',
        creator: '',
        modifiedBy: '',
        hostedBy: '',
        endpoint: '',
        serviceType: '',
        modifiedDate: new Date().toISOString().slice(0, 16)
      }
    ]);
  }, [data]);

  // Notify parent of changes
  useEffect(() => {
    if (onChange) {
      onChange(dataServices);
    }
  }, [dataServices, onChange]);

  useEffect(() => {
    // Data Services are optional, so always valid
    if (onValidityChange) {
      onValidityChange(true);
    }
  }, [onValidityChange]);

  const handleAddDataService = () => {
    const newDataServices = [
      ...dataServices,
      {
        id: `DSVC-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        title: '',
        description: '',
        creationDate: '',
        creator: '',
        modifiedBy: '',
        hostedBy: '',
        endpoint: '',
        serviceType: '',
        modifiedDate: new Date().toISOString().slice(0, 16)
      }
    ];
    setDataServices(newDataServices);
  };

  const handleRemoveDataService = (index) => {
    if (dataServices.length > 1) {
      const updated = [...dataServices];
      updated.splice(index, 1);
      setDataServices(updated);
    }
  };

  const handleDataServiceChange = (index, field) => (event) => {
    const updated = [...dataServices];
    updated[index][field] = event.target.value;
    setDataServices(updated);
  };

  // Tooltip texts based on requirements
  const tooltips = {
    id: 'Graph Property: mscore:idText. Autogenerated data service ID.',
    title: 'Graph Property: skos:prefLabel. Enter a title for the data service.',
    description: 'Graph Property: mscore:description. Describe the data service.',
    creationDate: 'Graph Property: mscore:createdAtDateTime. Select the creation date.',
    creator: 'Graph Property: msprov:hasCreator. Select the data service creator.',
    modifiedBy: 'Graph Property: mscore:wasLastModifiedBy. Select who modified this data service.',
    hostedBy: 'Graph Property: msinfo:isHostedBy. Select where this service is hosted.',
    endpoint: 'Graph Property: nfrdcat:hasEndpoint. Enter the endpoint URL.',
    serviceType: 'Graph Property: mscore:categorizedBy. Select the type of data service.',
    modifiedDate: 'Graph Property: mscore:lastModifiedAtDateTime. Date when the data service was last modified.'
  };

  const serviceTypeOptions = ['Data Feed', 'API', 'Message Queue'];
  const serverOptions = ['Server A', 'Server B', 'Server C'];
  const orgs = ['MS Technology Org A', 'MS Technology Org B', 'MS Technology Org C'];
  const users = ['John Smith', 'Jane Doe', 'Robert Johnson', 'Sarah Williams'];

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        Data Services
      </Typography>
      <Typography variant="body2" color="textSecondary" gutterBottom>
        Configure data services for this dataset (optional)
      </Typography>

      {dataServices.map((dataService, index) => (
        <Box key={dataService.id} sx={{ mt: 3, p: 2, border: '1px solid #eee', borderRadius: 1 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">
              Data Service {index + 1}
            </Typography>
            <Button 
              onClick={() => handleRemoveDataService(index)}
              disabled={dataServices.length === 1}
              color="error"
              startIcon={<Delete />}
            >
              Remove
            </Button>
          </Box>

          <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Data Service ID"
                value={dataService.id}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <Tooltip title={tooltips.id} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
                helperText={tooltips.id}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Modified Date"
                type="datetime-local"
                InputLabelProps={{ shrink: true }}
                value={dataService.modifiedDate}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <Tooltip title={tooltips.modifiedDate} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
                helperText={tooltips.modifiedDate}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Data Service Title"
                value={dataService.title}
                onChange={handleDataServiceChange(index, 'title')}
                helperText={tooltips.title}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.title} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={2}
                label="Data Service Description"
                value={dataService.description}
                onChange={handleDataServiceChange(index, 'description')}
                helperText={tooltips.description}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.description} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Creation Date"
                type="datetime-local"
                InputLabelProps={{ shrink: true }}
                value={dataService.creationDate}
                onChange={handleDataServiceChange(index, 'creationDate')}
                helperText={tooltips.creationDate}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.creationDate} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Data Service Creator</InputLabel>
                <Select
                  value={dataService.creator}
                  label="Data Service Creator"
                  onChange={handleDataServiceChange(index, 'creator')}
                >
                  {orgs.map(org => (
                    <MenuItem key={org} value={org}>{org}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{tooltips.creator}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Hosted By</InputLabel>
                <Select
                  value={dataService.hostedBy}
                  label="Hosted By"
                  onChange={handleDataServiceChange(index, 'hostedBy')}
                >
                  {serverOptions.map(option => (
                    <MenuItem key={option} value={option}>{option}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{tooltips.hostedBy}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Endpoint"
                value={dataService.endpoint}
                onChange={handleDataServiceChange(index, 'endpoint')}
                helperText={tooltips.endpoint}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.endpoint} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Data Service Type</InputLabel>
                <Select
                  value={dataService.serviceType}
                  label="Data Service Type"
                  onChange={handleDataServiceChange(index, 'serviceType')}
                >
                  {serviceTypeOptions.map(option => (
                    <MenuItem key={option} value={option}>{option}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{tooltips.serviceType}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Modified By</InputLabel>
                <Select
                  value={dataService.modifiedBy}
                  label="Modified By"
                  onChange={handleDataServiceChange(index, 'modifiedBy')}
                >
                  {users.map(user => (
                    <MenuItem key={user} value={user}>{user}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{tooltips.modifiedBy}</FormHelperText>
              </FormControl>
            </Grid>
          </Grid>
        </Box>
      ))}

      <Button
        variant="outlined"
        startIcon={<Add />}
        onClick={handleAddDataService}
        sx={{ mt: 2 }}
      >
        Add Data Service
      </Button>
    </Box>
  );
};

export default DataServices;