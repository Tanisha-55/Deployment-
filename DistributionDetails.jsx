import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  GridLegacy as Grid,
  FormHelperText,
  Tooltip,
  IconButton,
  Button
} from '@mui/material';
import { HelpOutline, Add, Delete } from '@mui/icons-material';

const DistributionDetails = ({ data, onChange, onValidityChange }) => {
  const [distributions, setDistributions] = useState(data || [
    {
      id: `DIST-${Date.now()}`,
      title: '',
      description: '',
      creationDate: '',
      creator: '',
      format: '',
      accessURL: '',
      downloadURL: '',
      updateFrequency: '',
      status: '',
      modifiedDate: new Date().toISOString().slice(0, 16)
    }
  ]);

  const [errors, setErrors] = useState([]);

  // Update local state when parent data changes
  useEffect(() => {
    setDistributions(data || [
      {
        id: `DIST-${Date.now()}`,
        title: '',
        description: '',
        creationDate: '',
        creator: '',
        format: '',
        accessURL: '',
        downloadURL: '',
        updateFrequency: '',
        status: '',
        modifiedDate: new Date().toISOString().slice(0, 16)
      }
    ]);
  }, [data]);

  // Notify parent of changes
  useEffect(() => {
    if (onChange) {
      onChange(distributions);
    }
  }, [distributions, onChange]);

  useEffect(() => {
    // Check if all distributions are valid
    const allValid = distributions.every((dist, index) => {
      const distErrors = validateDistribution(dist);
      return Object.keys(distErrors).length === 0;
    });
    
    if (onValidityChange) {
      onValidityChange(allValid && distributions.length > 0);
    }
  }, [distributions, onValidityChange]);

  const validateDistribution = (distribution) => {
    const distErrors = {};
    
    if (!distribution.title) distErrors.title = 'Title is required';
    if (!distribution.creationDate) distErrors.creationDate = 'Creation date is required';
    if (!distribution.creator) distErrors.creator = 'Creator is required';
    if (!distribution.updateFrequency) distErrors.updateFrequency = 'Update frequency is required';
    if (!distribution.status) distErrors.status = 'Status is required';
    
    return distErrors;
  };

  const handleAddDistribution = () => {
    const newDistributions = [
      ...distributions,
      {
        id: `DIST-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
        title: '',
        description: '',
        creationDate: '',
        creator: '',
        format: '',
        accessURL: '',
        downloadURL: '',
        updateFrequency: '',
        status: '',
        modifiedDate: new Date().toISOString().slice(0, 16)
      }
    ];
    setDistributions(newDistributions);
    setErrors([...errors, {}]);
  };

  const handleRemoveDistribution = (index) => {
    if (distributions.length > 1) {
      const updated = [...distributions];
      updated.splice(index, 1);
      setDistributions(updated);
      
      const updatedErrors = [...errors];
      updatedErrors.splice(index, 1);
      setErrors(updatedErrors);
    }
  };

  const handleDistributionChange = (index, field) => (event) => {
    const updated = [...distributions];
    updated[index][field] = event.target.value;
    setDistributions(updated);
    
    // Validate this distribution
    const distErrors = validateDistribution(updated[index]);
    const updatedErrors = [...errors];
    updatedErrors[index] = distErrors;
    setErrors(updatedErrors);
  };

  // Tooltip texts based on requirements
  const tooltips = {
    id: 'Graph Property: mscore:idText. Autogenerated distribution ID.',
    title: 'Graph Property: skos:prefLabel. Enter a title for the distribution.',
    description: 'Graph Property: mscore:description. Describe the distribution.',
    creationDate: 'Graph Property: mscore:createdAtDateTime. Select the creation date.',
    creator: 'Graph Property: msprov:hasCreator. Select the distribution creator.',
    format: 'Graph Property: mscore:categorizedBy. Select the distribution format.',
    accessURL: 'Graph Property: nfrdcat:accessURL. Enter the access URL.',
    downloadURL: 'Graph Property: nfrdcat:downloadURL. Enter the download URL.',
    updateFrequency: 'Graph Property: nfrdcat:hasUpdateFrequency. Select how often the distribution is updated.',
    status: 'Graph Property: mscore:hasStatus. Select the distribution status.',
    modifiedDate: 'Graph Property: mscore:lastModifiedAtDateTime. Date when the distribution was last modified.'
  };

  const formatOptions = ['CSV', 'PPT', 'XLS', 'PDF', 'TTL', 'JSON', 'TXT', 'XML'];
  const frequencyOptions = ['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly', 'On Demand'];
  const statusOptions = ['Active', 'Deleted', 'Deprecated', 'Inactive', 'Pending', 'Terminated'];
  const orgs = ['MS Technology Org A', 'MS Technology Org B', 'MS Technology Org C'];

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        Distribution Details
      </Typography>
      <Typography variant="body2" color="textSecondary" gutterBottom>
        Configure distribution information
      </Typography>

      {distributions.map((distribution, index) => (
        <Box key={distribution.id} sx={{ mt: 3, p: 2, border: '1px solid #eee', borderRadius: 1 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">
              Distribution {index + 1}
            </Typography>
            <Button 
              onClick={() => handleRemoveDistribution(index)}
              disabled={distributions.length === 1}
              color="error"
              startIcon={<Delete />}
            >
              Remove
            </Button>
          </Box>

          <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Distribution ID"
                value={distribution.id}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <Tooltip title={tooltips.id} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
                helperText={tooltips.id}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Modified Date"
                type="datetime-local"
                InputLabelProps={{ shrink: true }}
                value={distribution.modifiedDate}
                InputProps={{
                  readOnly: true,
                  endAdornment: (
                    <Tooltip title={tooltips.modifiedDate} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
                helperText={tooltips.modifiedDate}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                required
                label="Distribution Title"
                value={distribution.title}
                onChange={handleDistributionChange(index, 'title')}
                error={!!errors[index]?.title}
                helperText={errors[index]?.title || tooltips.title}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.title} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={2}
                label="Distribution Description"
                value={distribution.description}
                onChange={handleDistributionChange(index, 'description')}
                helperText={tooltips.description}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.description} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                required
                label="Creation Date"
                type="datetime-local"
                InputLabelProps={{ shrink: true }}
                value={distribution.creationDate}
                onChange={handleDistributionChange(index, 'creationDate')}
                error={!!errors[index]?.creationDate}
                helperText={errors[index]?.creationDate || tooltips.creationDate}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.creationDate} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth required error={!!errors[index]?.creator}>
                <InputLabel>Distribution Creator</InputLabel>
                <Select
                  value={distribution.creator}
                  label="Distribution Creator"
                  onChange={handleDistributionChange(index, 'creator')}
                >
                  {orgs.map(org => (
                    <MenuItem key={org} value={org}>{org}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{errors[index]?.creator || tooltips.creator}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Distribution Format</InputLabel>
                <Select
                  value={distribution.format}
                  label="Distribution Format"
                  onChange={handleDistributionChange(index, 'format')}
                >
                  {formatOptions.map(option => (
                    <MenuItem key={option} value={option}>{option}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{tooltips.format}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth required error={!!errors[index]?.updateFrequency}>
                <InputLabel>Update Frequency</InputLabel>
                <Select
                  value={distribution.updateFrequency}
                  label="Update Frequency"
                  onChange={handleDistributionChange(index, 'updateFrequency')}
                >
                  {frequencyOptions.map(option => (
                    <MenuItem key={option} value={option}>{option}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{errors[index]?.updateFrequency || tooltips.updateFrequency}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth required error={!!errors[index]?.status}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={distribution.status}
                  label="Status"
                  onChange={handleDistributionChange(index, 'status')}
                >
                  {statusOptions.map(option => (
                    <MenuItem key={option} value={option}>{option}</MenuItem>
                  ))}
                </Select>
                <FormHelperText>{errors[index]?.status || tooltips.status}</FormHelperText>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Access URL"
                value={distribution.accessURL}
                onChange={handleDistributionChange(index, 'accessURL')}
                helperText={tooltips.accessURL}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.accessURL} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Download URL"
                value={distribution.downloadURL}
                onChange={handleDistributionChange(index, 'downloadURL')}
                helperText={tooltips.downloadURL}
                InputProps={{
                  endAdornment: (
                    <Tooltip title={tooltips.downloadURL} arrow>
                      <IconButton size="small">
                        <HelpOutline />
                      </IconButton>
                    </Tooltip>
                  ),
                }}
              />
            </Grid>
          </Grid>
        </Box>
      ))}

      <Button
        variant="outlined"
        startIcon={<Add />}
        onClick={handleAddDistribution}
        sx={{ mt: 2 }}
      >
        Add Distribution
      </Button>
    </Box>
  );
};

export default DistributionDetails;