import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  GridLegacy as Grid,
  FormHelperText,
  Tooltip,
  IconButton
} from '@mui/material';
import { HelpOutline } from '@mui/icons-material';

const DatasetDetails = ({ data = {}, onChange, onValidityChange }) => {
  // Initialize with empty values if data is undefined
  const [formData, setFormData] = useState({
    id: data?.id || `DS-${Date.now()}`,
    title: data?.title || '',
    description: data?.description || '',
    purposeDescription: data?.purposeDescription || '',
    tags: data?.tags || '',
    updateFrequency: data?.updateFrequency || '',
    owner: data?.owner || '',
    steward: data?.steward || '',
    creator: data?.creator || '',
    nfrRisk: data?.nfrRisk || '',
    status: data?.status || '',
    inventoriedDate: data?.inventoriedDate || '',
    creationDate: data?.creationDate || '',
    ddlcReviewedDate: data?.ddlcReviewedDate || '',
    documentationUrl: data?.documentationUrl || '',
    modifiedBy: data?.modifiedBy || 'Current User',
    modifiedDate: data?.modifiedDate || new Date().toISOString().slice(0, 16)
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (onChange) {
      onChange(formData);
    }
  }, [formData, onChange]);

  // Validate form
  useEffect(() => {
    const newErrors = {};
    
    // Required fields validation
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.description) newErrors.description = 'Description is required';
    if (!formData.purposeDescription) newErrors.purposeDescription = 'Purpose description is required';
    if (!formData.updateFrequency) newErrors.updateFrequency = 'Update frequency is required';
    if (!formData.owner) newErrors.owner = 'Owner is required';
    if (!formData.steward) newErrors.steward = 'Steward is required';
    if (!formData.creator) newErrors.creator = 'Creator is required';
    if (!formData.status) newErrors.status = 'Status is required';
    if (!formData.inventoriedDate) newErrors.inventoriedDate = 'Inventoried date is required';
    if (!formData.creationDate) newErrors.creationDate = 'Creation date is required';
    
    setErrors(newErrors);
    
    // Check if form is valid
    const isValid = Object.keys(newErrors).length === 0;
    if (onValidityChange) {
      onValidityChange(isValid);
    }
  }, [formData, onValidityChange]);

  const handleChange = (field) => (event) => {
    setFormData({ ...formData, [field]: event.target.value });
  };

  // Tooltip texts based on requirements
  const tooltips = {
    id: 'Graph Property: mscore:idText. Autogenerated dataset ID.',
    title: 'Graph Property: skos:prefLabel. Enter a title for the dataset.',
    description: 'Graph Property: mscore:description. Describe the dataset.',
    purposeDescription: 'Graph Property: marpc:purposeDescription. Describe the purpose of the dataset.',
    tags: 'Graph Property: mscore:hasTag. Enter comma-separated tags.',
    updateFrequency: 'Graph Property: nfrdcat:hasUpdateFrequency. Select how often the dataset is updated.',
    owner: 'Graph Property: mscore:hasOwner. Select the dataset owner.',
    steward: 'Graph Property: msinfo:hasPointOfContact. Select the dataset steward.',
    creator: 'Graph Property: msprov:hasCreator. Select the dataset creator.',
    nfrRisk: 'Graph Property: mscore:categorizedBy. Select the related NFR risk.',
    status: 'Graph Property: mscore:hasStatus. Select the dataset status.',
    inventoriedDate: 'Graph Property: msinfo:inventoriedAtDateTime. Select the inventoried date.',
    creationDate: 'Graph Property: mscore:createdAtDateTime. Select the creation date.',
    ddlcReviewedDate: 'Graph Property: msinfo:validatedAtDateTime. Select the DDLC reviewed date.',
    documentationUrl: 'Graph Property: msinfo:definitionWebUrl. Enter the URL for additional documentation.',
    modifiedBy: 'Graph Property: mscore:wasLastModifiedBy. User who last modified the dataset.',
    modifiedDate: 'Graph Property: mscore:lastModifiedAtDateTime. Date when the dataset was last modified.'

  };

  // Dummy data for dropdowns
  const frequencyOptions = ['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly', 'On Demand'];
  const statusOptions = ['Active', 'Deleted', 'Deprecated', 'Inactive', 'Pending', 'Terminated'];
  const nfrRiskOptions = ['Low', 'Medium', 'High', 'Critical'];
  const users = ['John Smith', 'Jane Doe', 'Robert Johnson', 'Sarah Williams'];
  const orgs = ['MS Technology Org A', 'MS Technology Org B', 'MS Technology Org C'];

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        Dataset Details
      </Typography>
      <Typography variant="body2" color="textSecondary" gutterBottom>
        Configure basic dataset information and settings
      </Typography>

      <Grid container spacing={2} sx={{ mt: 1 }}>
        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="Dataset ID"
            value={formData.id}
            InputProps={{
              readOnly: true,
              endAdornment: (
                <Tooltip title={tooltips.id} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
            helperText={tooltips.id}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            required
            label="Dataset Title"
            value={formData.title}
            onChange={handleChange('title')}
            error={!!errors.title}
            helperText={errors.title || tooltips.title}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.title} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="Modified Date"
            type="datetime-local"
            InputLabelProps={{ shrink: true }}
            value={formData.modifiedDate}
            InputProps={{
              readOnly: true,
              endAdornment: (
                <Tooltip title={tooltips.modifiedDate} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
            helperText={tooltips.modifiedDate}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="Modified By"
            value={formData.modifiedBy}
            InputProps={{
              readOnly: true,
              endAdornment: (
                <Tooltip title={tooltips.modifiedBy} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
            helperText={tooltips.modifiedBy}
          />
        </Grid>

        <Grid item xs={12}>
          <TextField
            fullWidth
            required
            multiline
            rows={3}
            label="Description"
            value={formData.description}
            onChange={handleChange('description')}
            error={!!errors.description}
            helperText={errors.description || tooltips.description}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.description} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12}>
          <TextField
            fullWidth
            required
            multiline
            rows={3}
            label="Purpose Description"
            value={formData.purposeDescription}
            onChange={handleChange('purposeDescription')}
            error={!!errors.purposeDescription}
            helperText={errors.purposeDescription || tooltips.purposeDescription}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.purposeDescription} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12}>
          <TextField
            fullWidth
            label="Tags"
            value={formData.tags}
            onChange={handleChange('tags')}
            helperText={tooltips.tags}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.tags} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControl fullWidth required error={!!errors.updateFrequency}>
            <InputLabel>Update Frequency</InputLabel>
            <Select
              value={formData.updateFrequency}
              label="Update Frequency"
              onChange={handleChange('updateFrequency')}
            >
              {frequencyOptions.map(option => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{errors.updateFrequency || tooltips.updateFrequency}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControl fullWidth required error={!!errors.status}>
            <InputLabel>Status</InputLabel>
            <Select
              value={formData.status}
              label="Status"
              onChange={handleChange('status')}
            >
              {statusOptions.map(option => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{errors.status || tooltips.status}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={4}>
          <FormControl fullWidth required error={!!errors.owner}>
            <InputLabel>Dataset Owner</InputLabel>
            <Select
              value={formData.owner}
              label="Dataset Owner"
              onChange={handleChange('owner')}
            >
              {users.map(user => (
                <MenuItem key={user} value={user}>{user}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{errors.owner || tooltips.owner}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={4}>
          <FormControl fullWidth required error={!!errors.steward}>
            <InputLabel>Dataset Steward</InputLabel>
            <Select
              value={formData.steward}
              label="Dataset Steward"
              onChange={handleChange('steward')}
            >
              {users.map(user => (
                <MenuItem key={user} value={user}>{user}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{errors.steward || tooltips.steward}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={4}>
          <FormControl fullWidth required error={!!errors.creator}>
            <InputLabel>Dataset Creator</InputLabel>
            <Select
              value={formData.creator}
              label="Dataset Creator"
              onChange={handleChange('creator')}
            >
              {orgs.map(org => (
                <MenuItem key={org} value={org}>{org}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{errors.creator || tooltips.creator}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={4}>
          <FormControl fullWidth>
            <InputLabel>Related NFR Risk</InputLabel>
            <Select
              value={formData.nfrRisk}
              label="Related NFR Risk"
              onChange={handleChange('nfrRisk')}
            >
              {nfrRiskOptions.map(option => (
                <MenuItem key={option} value={option}>{option}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{tooltips.nfrRisk}</FormHelperText>
          </FormControl>
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            fullWidth
            required
            label="Inventoried Date"
            type="datetime-local"
            InputLabelProps={{ shrink: true }}
            value={formData.inventoriedDate}
            onChange={handleChange('inventoriedDate')}
            error={!!errors.inventoriedDate}
            helperText={errors.inventoriedDate || tooltips.inventoriedDate}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.inventoriedDate} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12} md={4}>
          <TextField
            fullWidth
            required
            label="Creation Date"
            type="datetime-local"
            InputLabelProps={{ shrink: true }}
            value={formData.creationDate}
            onChange={handleChange('creationDate')}
            error={!!errors.creationDate}
            helperText={errors.creationDate || tooltips.creationDate}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.creationDate} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="DDLC Last Reviewed Date"
            type="datetime-local"
            InputLabelProps={{ shrink: true }}
            value={formData.ddlcReviewedDate}
            onChange={handleChange('ddlcReviewedDate')}
            helperText={tooltips.ddlcReviewedDate}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.ddlcReviewedDate} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="Link to Additional Documentation"
            value={formData.documentationUrl}
            onChange={handleChange('documentationUrl')}
            helperText={tooltips.documentationUrl}
            InputProps={{
              endAdornment: (
                <Tooltip title={tooltips.documentationUrl} arrow>
                  <IconButton size="small">
                    <HelpOutline />
                  </IconButton>
                </Tooltip>
              ),
            }}
          />
        </Grid>
      </Grid>
    </Box>
  );
};

export default DatasetDetails;